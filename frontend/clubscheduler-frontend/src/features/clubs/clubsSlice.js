import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';
import clubsService from './clubsService';

// Define an initial state for clubs
const initialState = {
  clubs: [],
  status: 'idle', // 'idle' | 'loading' | 'succeeded' | 'failed'
  error: null
};

// Define an async thunk to fetch all clubs from the server
export const fetchAllClubs = createAsyncThunk(
  'clubs/fetchAll',
  async (_, thunkAPI) => {
    try {
      if (thunkAPI.getState().auth.user) {
        const accessToken = thunkAPI.getState().auth.user.access
        return await clubsService.fetchAllClubs(accessToken)
      }
    }
    catch (error) {
      const message = (error.response && error.response.data
        && error.response.data.message) ||
        error.message || error.toString()
        console.log(message);

      return thunkAPI.rejectWithValue(message)
    } 
  }
);

export const fetchClubDetails = createAsyncThunk(
  'clubs/fetchDetails',
  

)

// Create a slice for clubs
const clubsSlice = createSlice({
  name: 'clubs',
  initialState,
  reducers: {
    // Additional reducers can be defined here for synchronous actions if needed
  },
  extraReducers: (builder) => {
    builder
      // Handle pending state while fetching clubs
      .addCase(fetchAllClubs.pending, (state) => {
        state.status = 'loading';
      })
      // Handle success state after fetching clubs
      .addCase(fetchAllClubs.fulfilled, (state, action) => {
        state.status = 'succeeded';
        state.clubs = action.payload;
        state.error = null;
      })
      // Handle error state if fetching clubs fails
      .addCase(fetchAllClubs.rejected, (state, action) => {
        state.status = 'failed';
        state.error = action.error.message;
      });
  }
});

// Export actions generated by the slice
export const { } = clubsSlice.actions;

// Export the reducer function generated by the slice
export default clubsSlice.reducer;